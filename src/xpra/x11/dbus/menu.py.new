# This file is part of Xpra.
# Copyright (C) 2015 Antoine Martin <antoine@devloop.org.uk>
# Xpra is released under the terms of the GNU GPL v2, or, at your option, any
# later version. See the file COPYING for details.

from xpra.log import Logger
log = Logger("menu")

from xpra.util import typedict


def has_gtk_menu_support(root_window):
    #figure out if we can handle the "global menu" stuff:
    try:
        from xpra.dbus.helper import DBusHelper
        assert DBusHelper
    except Exception as e:
        log("has_menu_support() no dbus: %s", e)
        return False
    try:
        from xpra.x11.gtk_x11.prop import prop_get
    except Exception as e:
        log("has_menu_support() no X11 bindings: %s", e)
        return False
    v = prop_get(root_window, "_NET_SUPPORTED", ["atom"], ignore_errors=True, raise_xerrors=False)
    if not v:
        log("has_menu_support() _NET_SUPPORTED is empty!?")
        return False
    show_window_menu = "_GTK_SHOW_WINDOW_MENU" in v
    log("has_menu_support() _GTK_SHOW_WINDOW_MENU in _NET_SUPPORTED: %s", show_window_menu)
    return show_window_menu


#for each window id, keep track of the current menu services we have created:
#wid -> [app_actions_service, window_actions_service, window_menu_service]
window_menus = {}

#to use when the window does not supply one for itself:
fallback_menus = {}

counter = 0


import os
KEEP_SERVICES = os.environ.get("XPRA_MENU_SERVICES_KEEP", "1")=="1"


def remove_service(x):
    try:
        log("remove_service(%s)", x)
        if x:
            x.remove_from_connection()
    except:
        log.error("Error removing service %s", x, exc_info=True)

def setup_dbus_window_menu(add, wid, menus, application_action_callback=None, window_action_callback=None):
    global window_menus, fallback_menus
    services, session_bus  = window_menus.get(wid, ([None, None, None], None))
    app_actions_service, window_actions_service, window_menu_service = services

    def remove_all_services():
        #frees up all the dbus services if their refcount reaches 0:
        for x in services:
            remove_service(x)
        try:
            del window_menus[wid]
        except:
            pass
    def nomenu():
        log("nomenu()")
        remove_all_services()
        #tell caller to clear all properties if they exist:
        return {
                "_GTK_APP_MENU_OBJECT_PATH"     : None,
                "_GTK_WINDOW_OBJECT_PATH"       : None,
                "_GTK_APPLICATION_OBJECT_PATH"  : None,
                "_GTK_UNIQUE_BUS_NAME"          : None,
                "_GTK_APPLICATION_ID"           : None
                }

    if add is False:
        return nomenu()
    enabled = menus.get("enabled", False)
    if (len(menus)==0 or (enabled is False)) and fallback_menus:
        #use fallback menus if the application menus are empty or disabled
        log("using fallback menu")
        menus = fallback_menus
    enabled = menus.get("enabled", False)
    if len(menus)==0 or (not enabled):
        #remove everything
        return nomenu()
    #ie: menu = {
    #         'enabled': True,
    #         'application-id':         'org.xpra.ExampleMenu',
    #         'application-actions':    {'quit': (True, '', ()), 'about': (True, '', ()), 'help': (True, '', ()), 'custom': (True, '', ()), 'activate-tab': (True, 's', ()), 'preferences': (True, '', ())},
    #         'window-actions':         {'edit-profile': (True, 's', ()), 'reset': (True, 'b', ()), 'about': (True, '', ()), 'help': (True, '', ()), 'fullscreen': (True, '', (0,)), 'detach-tab': (True, '', ()), 'save-contents': (True, '', ()), 'zoom': (True, 'i', ()), 'move-tab': (True, 'i', ()), 'new-terminal': (True, '(ss)', ()), 'switch-tab': (True, 'i', ()), 'new-profile': (True, '', ()), 'close': (True, 's', ()), 'show-menubar': (True, '', (1,)), 'select-all': (True, '', ()), 'copy': (True, '', ()), 'paste': (True, 's', ()), 'find': (True, 's', ()), 'preferences': (True, '', ())},
    #         'window-menu':            {0:
    #               {0: ({':section': (0, 1)}, {':section': (0, 2)}, {':section': (0, 3)}),
    #                1: ({'action': 'win.new-terminal', 'target': ('default', 'default'), 'label': '_New Terminal'},),
    #                2: ({'action': 'app.preferences', 'label': '_Preferences'},),
    #                3: ({'action': 'app.help', 'label': '_Help'}, {'action': 'app.about', 'label': '_About'}, {'action': 'app.quit', 'label': '_Quit'}),
    #                }
    #             }
    #           }
    m = typedict(menus)
    #app_id          = bytestostr(m.strget("application-id", b"Window%i" % wid)).decode()
    app_actions     = m.dictget("application-actions")
    window_actions  = m.dictget("window-actions")
    window_menu     = m.dictget("window-menu")

    #make or re-use services:
    try:
        from xpra.util import strtobytes
        from xpra.dbus.common import init_session_bus
        from xpra.dbus.gtk_menuactions import Menus, Actions
        #FIXME: close() the connection when freeing stuff!
        NAME_PREFIX = u"org.xpra.client."
        name = NAME_PREFIX + "Window%i" % wid
        props = {}
        if app_actions_service is None or window_actions_service is None or window_menu_service is None:
            #ensure they will use the same session_bus:
            remove_all_services()
            session_bus = None
        if not KEEP_SERVICES:
            global counter
            remove_all_services()
            session_bus = None
            name += "S%i" % counter
            counter += 1
        if session_bus is None:
            session_bus = init_session_bus(private=True)    #(menus!=fallback_menus))
            bus_name = session_bus.get_unique_name().decode()
            props["_GTK_UNIQUE_BUS_NAME"]   = ("utf8", bus_name)
            props["_GTK_APPLICATION_ID"]    = ("utf8", name)
        window_menus[wid] = services, session_bus

        app_path = strtobytes("/"+name.replace(".", "/")).decode()
        if app_actions_service and KEEP_SERVICES:
            app_actions_service.set_actions(app_actions)
        else:
            app_actions_service = Actions(name, app_path, session_bus, app_actions, application_action_callback)
            props["_GTK_APPLICATION_OBJECT_PATH"] = ("utf8", app_path)
            services[0] = app_actions_service

        window_path = u"%s/window/%s" % (app_path, wid)
        if window_actions_service and KEEP_SERVICES:
            window_actions_service.set_actions(window_actions)
        else:
            window_actions_service = Actions(name, window_path, session_bus, window_actions, window_action_callback)
            props["_GTK_WINDOW_OBJECT_PATH"] = ("utf8", window_path)
            services[1] = window_actions_service

        menu_path = u"%s/menus/appmenu" % app_path
        if window_menu_service and KEEP_SERVICES:
            window_menu_service.set_menus(window_menu)
        else:
            window_menu_service = Menus(name, menu_path, session_bus, window_menu)
            props["_GTK_APP_MENU_OBJECT_PATH"] = ("utf8", menu_path)
            services[2] = window_menu_service

        return props
    except Exception:
        log.error("Error: cannot parse or apply menu:", exc_info=True)
        return nomenu()

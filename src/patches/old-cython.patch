Index: xpra/codecs/argb/argb.pxd
===================================================================
--- a/xpra/codecs/argb/argb.pxd	(revision 3848)
+++ b/xpra/codecs/argb/argb.pxd	(working copy)
@@ -5,4 +5,6 @@
 # later version. See the file COPYING for details.
 
 
-cdef argbdata_to_pixdata(const unsigned long* data, int len)
+ctypedef unsigned long* const_unsigned_long_p "const unsigned long*"
+
+cdef argbdata_to_pixdata(const_unsigned_long_p data, int len)
Index: xpra/codecs/argb/argb.pyx
===================================================================
--- a/xpra/codecs/argb/argb.pyx	(revision 3848)
+++ b/xpra/codecs/argb/argb.pyx	(working copy)
@@ -8,6 +8,7 @@
     object PyString_FromStringAndSize(char * s, int len)
     ctypedef int Py_ssize_t
     ctypedef void** const_void_pp "const void**"
+    ctypedef unsigned long* const_unsigned_long_p "const unsigned long*"
     int PyObject_AsWriteBuffer(object obj,
                                void ** buffer,
                                Py_ssize_t * buffer_len) except -1
@@ -18,14 +19,14 @@
 
 def argb_to_rgba(buf):
     # b is a Python buffer object
-    cdef const unsigned long * cbuf = <unsigned long *> 0
+    cdef const_unsigned_long_p cbuf = <unsigned long *> 0
     cdef Py_ssize_t cbuf_len = 0
     assert sizeof(int) == 4
     assert len(buf) % 4 == 0, "invalid buffer size: %s is not a multiple of 4" % len(buf)
     assert PyObject_AsReadBuffer(buf, <const_void_pp> &cbuf, &cbuf_len)==0
     return argbdata_to_pixdata(cbuf, cbuf_len)
 
-cdef argbdata_to_pixdata(const unsigned long* data, int dlen):
+cdef argbdata_to_pixdata(const_unsigned_long_p data, int dlen):
     if dlen <= 0:
         return None
     assert dlen % 4 == 0, "invalid buffer size: %s is not a multiple of 4" % dlen
@@ -61,7 +62,7 @@
     assert PyObject_AsReadBuffer(buf, <const_void_pp> &cbuf, &cbuf_len)==0
     return argbdata_to_rgb(cbuf, cbuf_len)
 
-cdef argbdata_to_rgb(const unsigned long* data, int dlen):
+cdef argbdata_to_rgb(const_unsigned_long_p data, int dlen):
     if dlen <= 0:
         return None
     assert dlen % 4 == 0, "invalid buffer size: %s is not a multiple of 4" % dlen

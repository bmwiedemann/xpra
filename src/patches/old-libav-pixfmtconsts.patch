Index: xpra/codecs/csc_swscale/colorspace_converter.pyx
===================================================================
--- a/xpra/codecs/csc_swscale/colorspace_converter.pyx	(revision 4457)
+++ b/xpra/codecs/csc_swscale/colorspace_converter.pyx	(working copy)
@@ -81,16 +81,16 @@
 COLORSPACES = []
 #keeping this array in scope ensures the strings don't go away!
 FORMAT_OPTIONS = [
-    ("AV_PIX_FMT_RGB24",    (3, 0, 0, 0),       (1, 0, 0, 0),       "RGB"   ),
-    ("AV_PIX_FMT_BGR24",    (3, 0, 0, 0),       (1, 0, 0, 0),       "BGR"   ),
-    ("AV_PIX_FMT_0RGB",     (4, 0, 0, 0),       (1, 0, 0, 0),       "XRGB"  ),
-    ("AV_PIX_FMT_BGR0",     (4, 0, 0, 0),       (1, 0, 0, 0),       "BGRX"  ),
-    ("AV_PIX_FMT_ARGB",     (4, 0, 0, 0),       (1, 0, 0, 0),       "XRGB"  ),
-    ("AV_PIX_FMT_BGRA",     (4, 0, 0, 0),       (1, 0, 0, 0),       "BGRX"  ),
-    ("AV_PIX_FMT_YUV420P",  (1, 0.5, 0.5, 0),   (1, 0.5, 0.5, 0),   "YUV420P"),
-    ("AV_PIX_FMT_YUV422P",  (1, 0.5, 0.5, 0),   (1, 1, 1, 0),       "YUV422P"),
-    ("AV_PIX_FMT_YUV444P",  (1, 1, 1, 0),       (1, 1, 1, 0),       "YUV444P"),
-    ("AV_PIX_FMT_GBRP",     (1, 1, 1, 0),       (1, 1, 1, 0),       "GBRP"   )
+    ("PIX_FMT_RGB24",    (3, 0, 0, 0),       (1, 0, 0, 0),       "RGB"   ),
+    ("PIX_FMT_BGR24",    (3, 0, 0, 0),       (1, 0, 0, 0),       "BGR"   ),
+    ("PIX_FMT_0RGB",     (4, 0, 0, 0),       (1, 0, 0, 0),       "XRGB"  ),
+    ("PIX_FMT_BGR0",     (4, 0, 0, 0),       (1, 0, 0, 0),       "BGRX"  ),
+    ("PIX_FMT_ARGB",     (4, 0, 0, 0),       (1, 0, 0, 0),       "XRGB"  ),
+    ("PIX_FMT_BGRA",     (4, 0, 0, 0),       (1, 0, 0, 0),       "BGRX"  ),
+    ("PIX_FMT_YUV420P",  (1, 0.5, 0.5, 0),   (1, 0.5, 0.5, 0),   "YUV420P"),
+    ("PIX_FMT_YUV422P",  (1, 0.5, 0.5, 0),   (1, 1, 1, 0),       "YUV422P"),
+    ("PIX_FMT_YUV444P",  (1, 1, 1, 0),       (1, 1, 1, 0),       "YUV444P"),
+    ("PIX_FMT_GBRP",     (1, 1, 1, 0),       (1, 1, 1, 0),       "GBRP"   )
      ]
 FORMATS = {}
 for av_enum_name, width_mult, height_mult, pix_fmt in FORMAT_OPTIONS:
Index: xpra/codecs/csc_swscale/constants.txt
===================================================================
--- a/xpra/codecs/csc_swscale/constants.txt	(revision 4458)
+++ b/xpra/codecs/csc_swscale/constants.txt	(working copy)
@@ -10,17 +10,17 @@
 ## dictionary through which the constants can be accessed like
 ## constants["AV_..."].
 
-AV_PIX_FMT_YUV420P
-AV_PIX_FMT_YUV422P
-AV_PIX_FMT_YUV444P
-AV_PIX_FMT_RGB24
-AV_PIX_FMT_0RGB
-AV_PIX_FMT_BGR0
-AV_PIX_FMT_ARGB
-AV_PIX_FMT_BGRA
-AV_PIX_FMT_GBRP
-AV_PIX_FMT_RGB24
-AV_PIX_FMT_BGR24
+PIX_FMT_YUV420P
+PIX_FMT_YUV422P
+PIX_FMT_YUV444P
+PIX_FMT_RGB24
+PIX_FMT_0RGB
+PIX_FMT_BGR0
+PIX_FMT_ARGB
+PIX_FMT_BGRA
+PIX_FMT_GBRP
+PIX_FMT_RGB24
+PIX_FMT_BGR24
 
 SWS_ACCURATE_RND
 SWS_BICUBIC
Index: xpra/codecs/dec_avcodec/constants.txt
===================================================================
--- a/xpra/codecs/dec_avcodec/constants.txt	(revision 4411)
+++ b/xpra/codecs/dec_avcodec/constants.txt	(working copy)
@@ -10,14 +10,14 @@
 ## dictionary through which the constants can be accessed like
 ## constants["AV_..."].
 
-AV_PIX_FMT_YUV420P
-AV_PIX_FMT_YUV422P
-AV_PIX_FMT_YUV444P
-AV_PIX_FMT_RGB24
-AV_PIX_FMT_0RGB
-AV_PIX_FMT_BGR0
-AV_PIX_FMT_ARGB
-AV_PIX_FMT_BGRA
-AV_PIX_FMT_GBRP
+PIX_FMT_YUV420P
+PIX_FMT_YUV422P
+PIX_FMT_YUV444P
+PIX_FMT_RGB24
+PIX_FMT_0RGB
+PIX_FMT_BGR0
+PIX_FMT_ARGB
+PIX_FMT_BGRA
+PIX_FMT_GBRP
 
 CODEC_FLAG2_FAST
Index: xpra/codecs/dec_avcodec/decoder.pyx
===================================================================
--- a/xpra/codecs/dec_avcodec/decoder.pyx	(revision 4411)
+++ b/xpra/codecs/dec_avcodec/decoder.pyx	(working copy)
@@ -80,8 +80,8 @@
     AVCodec *avcodec_find_decoder(AVCodecID id)
     AVCodecContext *avcodec_alloc_context3(const AVCodec *codec)
     int avcodec_open2(AVCodecContext *avctx, const AVCodec *codec, AVDictionary **options)
-    AVFrame *avcodec_alloc_frame()
-    void avcodec_free_frame(AVFrame **frame)
+    #AVFrame *avcodec_alloc_frame()
+    #void avcodec_free_frame(AVFrame **frame)
     int avcodec_close(AVCodecContext *avctx)
 
     #actual decoding:
@@ -113,15 +113,15 @@
     #populate mappings:
     COLORSPACES = []
     for pix_fmt, av_enum_str in {
-            "YUV420P"   : "AV_PIX_FMT_YUV420P",
-            "YUV422P"   : "AV_PIX_FMT_YUV422P",
-            "YUV444P"   : "AV_PIX_FMT_YUV444P",
-            "RGB"       : "AV_PIX_FMT_RGB24",
-            "XRGB"      : "AV_PIX_FMT_0RGB",
-            "BGRX"      : "AV_PIX_FMT_BGR0",
-            "ARGB"      : "AV_PIX_FMT_ARGB",
-            "BGRA"      : "AV_PIX_FMT_BGRA",
-            "GBRP"      : "AV_PIX_FMT_GBRP",
+            "YUV420P"   : "PIX_FMT_YUV420P",
+            "YUV422P"   : "PIX_FMT_YUV422P",
+            "YUV444P"   : "PIX_FMT_YUV444P",
+            "RGB"       : "PIX_FMT_RGB24",
+            "XRGB"      : "PIX_FMT_0RGB",
+            "BGRX"      : "PIX_FMT_BGR0",
+            "ARGB"      : "PIX_FMT_ARGB",
+            "BGRA"      : "PIX_FMT_BGRA",
+            "GBRP"      : "PIX_FMT_GBRP",
          }.items():
         av_enum = constants.get(av_enum_str)
         if av_enum is None:
@@ -346,7 +346,7 @@
             error("could not open codec")
             self.clean_decoder()
             return  False
-        self.frame = avcodec_alloc_frame()
+        self.frame = <AVFrame *> xmemalign(sizeof(AVFrame))
         if self.frame==NULL:
             error("could not allocate an AVFrame for decoding")
             self.clean_decoder()
@@ -381,8 +381,8 @@
 
         debug("clean_decoder() freeing AVFrame: %s", hex(<unsigned long> self.frame))
         if self.frame!=NULL:
-            avcodec_free_frame(&self.frame)
-            #redundant: self.frame = NULL
+            #free(&self.frame)   #freeing here causes a double free on Ubuntu, avcodec_close probably does it too
+            self.frame = NULL
 
         cdef unsigned long ctx_key          #@DuplicatedSignature
         debug("clean_decoder() freeing AVCodecContext: %s", hex(<unsigned long> self.codec_ctx))
